// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    //Trata entradas para lógica de seleção
    Not(in=address[0], out=NotA);
    Not(in=address[1], out=NotB);
    Not(in=address[2], out=NotC);


    DMux8Way(in = load, sel = address, a=SelR0, b=SelR1, c=SelR2, d=SelR3, e=SelR4, f=SelR5, g=SelR6, h=SelR7);


    // Registrador 0
    And(a=SelR0, b=load, out=LoadR0);
    ARegister(in=in, load=LoadR0, out=R0Out);

    // Registrador 1
    And(a=SelR1, b=load, out=LoadR1);
    ARegister(in=in, load=LoadR1, out=R1Out);

    // Registrador 2
    And(a=SelR2, b=load, out=LoadR2);
    ARegister(in=in, load=LoadR2, out=R2Out);

    // Registrador 3
    And(a=SelR3, b=load, out=LoadR3);
    ARegister(in=in, load=LoadR3, out=R3Out);

    // Registrador 4
    And(a=SelR4, b=load, out=LoadR4);
    ARegister(in=in, load=LoadR4, out=R4Out);

    // Registrador 5
    And(a=SelR5, b=load, out=LoadR5);
    ARegister(in=in, load=LoadR5, out=R5Out);

    // Registrador 6
    And(a=SelR6, b=load, out=LoadR6);
    ARegister(in=in, load=LoadR6, out=R6Out);

    // Registrador 7
    And(a=SelR7, b=load, out=LoadR7);
    ARegister(in=in, load=LoadR7, out=R7Out);



    Mux8Way16(a=R0Out, b=R1Out, c=R2Out, d=R3Out, e=R4Out, f=R5Out, g=R6Out, h=R7Out, sel[0]=address[0], sel[1]=address[1], sel[2]=address[2], out=out);

}